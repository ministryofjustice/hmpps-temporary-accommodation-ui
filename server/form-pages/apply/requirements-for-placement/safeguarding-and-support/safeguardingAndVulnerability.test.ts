import { applicationFactory } from '../../../../testutils/factories'
import { itShouldHaveNextValue, itShouldHavePreviousValue } from '../../../shared-examples'
import { yesOrNoResponseWithDetail } from '../../../utils'
import SafeguardingAndVulnerability from './safeguardingAndVulnerability'

jest.mock('../../../utils')

const body = { concerns: 'yes' as const, concernsDetail: 'Detail' }

describe('SafeguardingAndVulnerability', () => {
  const application = applicationFactory.build()

  describe('body', () => {
    it('sets the body', () => {
      const page = new SafeguardingAndVulnerability(body, application)

      expect(page.body).toEqual(body)
    })
  })

  itShouldHavePreviousValue(new SafeguardingAndVulnerability({}, application), 'dashboard')
  itShouldHaveNextValue(new SafeguardingAndVulnerability({}, application), 'support-in-the-community')

  describe('errors', () => {
    it('returns an empty object if the concerns fields are populated', () => {
      const page = new SafeguardingAndVulnerability(body, application)
      expect(page.errors()).toEqual({})
    })

    it('returns an empty object if the concerns answer is no', () => {
      const page = new SafeguardingAndVulnerability({ concerns: 'no' }, application)
      expect(page.errors()).toEqual({})
    })

    it('returns an error if the concerns answer not populated', () => {
      const page = new SafeguardingAndVulnerability({ ...body, concerns: undefined }, application)
      expect(page.errors()).toEqual({
        concerns: 'You must specify if you have any concerns about safeguarding and/or vulnerability',
      })
    })

    it('returns an error if the concerns answer is yes but details are not populated', () => {
      const page = new SafeguardingAndVulnerability({ ...body, concernsDetail: undefined }, application)
      expect(page.errors()).toEqual({
        concernsDetail: 'You must provide details of any concerns about safeguarding and/or vulnerability',
      })
    })
  })

  describe('response', () => {
    it('returns a translated version of the response', () => {
      ;(yesOrNoResponseWithDetail as jest.Mock).mockReturnValue('Response with optional detail')

      const page = new SafeguardingAndVulnerability(body, application)
      expect(page.response()).toEqual({
        [page.questions.concerns]: 'Response with optional detail',
      })
      expect(yesOrNoResponseWithDetail).toHaveBeenCalledWith('concerns', body)
    })
  })
})
